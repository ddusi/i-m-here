{"ast":null,"code":"/*global kakao*/\n\"use strict\";\n\nvar _jsxFileName = \"/Users/ddusi/projects/im-here/src/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport imhere from \"./assets/marker.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Map = () => {\n  _s();\n\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [mapdata, setMapdata] = useState(null);\n  useEffect(() => {\n    //지도를 담은 container\n    let container = document.getElementById(\"map\"); //지도 option 설정\n\n    let options = {\n      center: new kakao.maps.LatLng(33.450701, 126.570667),\n      level: 2\n    }; //지도 생성, 객체 리턴\n\n    let map = new kakao.maps.Map(container, options);\n    setMapdata(map);\n  }, []); // eslint-disable-next-line\n\n  const getLocation = async () => {\n    if (!navigator.geolocation) {\n      setStatus(\"현재 브라우저에서 위치 정보가 지원되지 않습니다.\");\n      return;\n    }\n\n    setStatus(\"위치 찾는중...\");\n    const position = await new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n    let lat = position.coords.latitude;\n    let lon = position.coords.longitude;\n    return {\n      lon: position.coords.longitude,\n      lat: position.coords.latitude\n    };\n  };\n\n  const displayLoc = locPosition => {\n    //마커 이미지\n    let imageSrc = `${imhere}`,\n        imageSize = new kakao.maps.Size(70, 90),\n        imageOption = {\n      offset: new kakao.maps.Point(27, 100)\n    };\n    let markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption),\n        markerPosition = new kakao.maps.LatLng(latitude, longitude);\n    let marker = new kakao.maps.Marker({\n      position: markerPosition,\n      image: markerImage\n    });\n    mapdata.setCenter(locPosition);\n    marker.setMap(mapdata);\n  };\n\n  const onLocation = async () => {\n    let {\n      lat,\n      lon\n    } = await getLocation();\n    console.log(lat, lon);\n    displayLoc(lat, lon);\n    const locPosition = new kakao.maps.LatLng(latitude, longitude); // await displayLoc(locPosition);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Maps, {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onLocation,\n      children: \"\\uC5EC\\uAE30\\uB85C~\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: longitude && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uACBD\\uB3C4: \", longitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: latitude && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC704\\uB3C4: \", latitude]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Map, \"zr1yxg4OcMU9HswsXBD3mqjyr9k=\");\n\n_c = Map;\nconst Maps = styled.div`\n  width: 400px;\n  height: 400px;\n`;\n_c2 = Maps;\nexport default Map;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"Maps\");","map":{"version":3,"sources":["/Users/ddusi/projects/im-here/src/Map.js"],"names":["React","useEffect","useState","styled","imhere","Map","latitude","setLatitude","longitude","setLongitude","status","setStatus","mapdata","setMapdata","container","document","getElementById","options","center","kakao","maps","LatLng","level","map","getLocation","navigator","geolocation","position","Promise","resolve","reject","getCurrentPosition","lat","coords","lon","displayLoc","locPosition","imageSrc","imageSize","Size","imageOption","offset","Point","markerImage","MarkerImage","markerPosition","marker","Marker","image","setCenter","setMap","onLocation","console","log","Maps","div"],"mappings":"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","sourcesContent":["/*global kakao*/\n\"use strict\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport imhere from \"./assets/marker.png\";\n\nconst Map = () => {\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [mapdata, setMapdata] = useState(null);\n\n  useEffect(() => {\n    //지도를 담은 container\n    let container = document.getElementById(\"map\");\n    //지도 option 설정\n    let options = {\n      center: new kakao.maps.LatLng(33.450701, 126.570667),\n      level: 2,\n    };\n\n    //지도 생성, 객체 리턴\n    let map = new kakao.maps.Map(container, options);\n    setMapdata(map);\n  }, []);\n\n  // eslint-disable-next-line\n\n  const getLocation = async () => {\n    if (!navigator.geolocation) {\n      setStatus(\"현재 브라우저에서 위치 정보가 지원되지 않습니다.\");\n      return;\n    }\n    setStatus(\"위치 찾는중...\");\n    const position = await new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n    let lat = position.coords.latitude\n    let lon = position.coords.longitude\n    return {\n      lon: position.coords.longitude,\n      lat: position.coords.latitude,\n    };\n };\n\n  const displayLoc = (locPosition) => {\n    //마커 이미지\n    let imageSrc = `${imhere}`,\n      imageSize = new kakao.maps.Size(70, 90),\n      imageOption = { offset: new kakao.maps.Point(27, 100) };\n\n    let markerImage = new kakao.maps.MarkerImage(\n        imageSrc,\n        imageSize,\n        imageOption\n      ),\n      markerPosition = new kakao.maps.LatLng(latitude, longitude);\n\n    let marker = new kakao.maps.Marker({\n      position: markerPosition,\n      image: markerImage,\n    });\n\n    mapdata.setCenter(locPosition);\n    marker.setMap(mapdata);\n  };\n\n  const onLocation = async () => {\n    let { lat, lon } = await getLocation();\n    console.log(lat, lon);\n    displayLoc(lat, lon)\n    const locPosition = new kakao.maps.LatLng(latitude, longitude);\n    // await displayLoc(locPosition);\n  };\n\n  return (\n    <>\n      <h3>{status}</h3>\n      <Maps id=\"map\" />\n      <button onClick={onLocation}>여기로~</button>\n      <div>{longitude && <p>경도: {longitude}</p>}</div>\n      <div>{latitude && <p>위도: {latitude}</p>}</div>\n    </>\n  );\n};\n\nconst Maps = styled.div`\n  width: 400px;\n  height: 400px;\n`;\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}